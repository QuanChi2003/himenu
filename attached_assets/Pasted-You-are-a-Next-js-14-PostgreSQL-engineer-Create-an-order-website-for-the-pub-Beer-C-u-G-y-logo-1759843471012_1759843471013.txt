You are a Next.js 14 + PostgreSQL engineer. Create an order website for the pub “Beer Cầu Gẫy” (logo with small line “cre:Quân”), deploy to production on Vercel, connect real DB (Postgres via Supabase). No sound.
ENV (use these exact values)
Set the environment variables exactly as below in Vercel (Production):
NEXT_PUBLIC_SITE_URL=https://beer-teal.vercel.app SUPABASE_DB_URL=postgresql://postgres:51Gpv9rpFe8aea06@db.scjnscjjihyxskypzvsh.supabase.co:5432/postgres?sslmode=require NEXT_PUBLIC_SUPABASE_URL=https://scjnscjjihyxskypzvsh.supabase.co NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNjam5zY2pqaWhoeHNreXB6dnNoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkzMTc0NjUsImV4cCI6MjA3NDg5MzQ2NX0.19DgKRDqpvPSRAqUABlN09JHE6Gqb5doKU0BPsZ1gv0 TELEGRAM_BOT_TOKEN=8420139694:AAFq_pEnrLYjm-czV6YALa0Jwv60nPbnNQk TELEGRAM_CHAT_ID=-1003107435979 TELEGRAM_USER_ID=5679855563 ADMIN_USER=admin ADMIN_PASS=admin JWT_SECRET=sgiwidjj682928377hshdii
Note: NEXT_PUBLIC_SUPABASE_URL/ANON_KEY is currently optional if server calls DB directly; still declare for future expansion.
Technology & Configuration Mandatory • Next.js 14 (App Router), TypeScript, TailwindCSS, Chart.js + react-chartjs-2, pg. • No next export. All API routes must run Node runtime and not prerender:
export const runtime = ‘nodejs’ export const dynamic = ‘force-dynamic’ export const revalidate = 0
• tsconfig.json must have:
“baseUrl”: “.”, “paths”: { “@/”: [”./”] }
• next.config.mjs minimum:
/** @type {import(‘next’).NextConfig} */ const nextConfig = { reactStrictMode: false, images: { remotePatterns: [{ protocol: ‘https’, hostname: ‘**’ }] }, eslint: { ignoreDuringBuilds: true } } export default nextConfig
DB Schema & Initialization (automatic) • Use pg.Pool (singleton global) to connect to SUPABASE_DB_URL. • Write ensureSchema() to run when needed, create if missing: • categories(id text pk, name text, parent_id text fk categories, pos int, created_at timestamptz) • items(id text pk, name text, description text, image_url text, category_id text fk categories, sale_price numeric, cost_price numeric, is_active boolean default true, created_at timestamptz) • coupons(code text pk, percent_off numeric check 0-100, max_uses int, used int default 0, valid_from tsz, valid_to tsz, active boolean default true) • members(phone text pk, name text, points int default 0, tier text default ‘Bronze’, updated_at tsz) • orders(id text pk default encode(gen_random_bytes(8),‘hex’), order_type text in (‘dine-in’,‘delivery’), table_number text, customer_name text, phone text, address text, note text, coupon_code text fk coupons, subtotal numeric, discount numeric default 0, total numeric, profit numeric, created_at tsz) • order_items(order_id fk orders on delete cascade, item_id fk items, qty int, sale_price numeric, cost_price numeric) • Index: create index if not exists idx_orders_created on orders(created_at); • View public: create or replace view menu_items_public as select id,name,description,image_url,category_id,sale_price,is_active from items where is_active=true; • Seed demo (only when DB empty) from data/menu.json: including categories (parent/child), items (with sale_price & cost_price), coupons (e.g.: BEER10).
Fix TypeScript (mandatory for build)
In app/api/orders/route.ts type explicitly to avoid “unknown” error:
type ItemRow = { id:string; name:string; sale_price:number; cost_price:number } const q = await pool.query<ItemRow>(select id, name, sale_price::float, cost_price::float from items where id = any($1) and is_active = true, [ids]) const dict = new Map<string, ItemRow>(q.rows.map(r => [r.id, r]))
When using:
const m = dict.get(it.id) as ItemRow | undefined if(!m) throw new Error(’Item not found: ’+it.id)
Customer Features (UI/UX) • Homepage /: logo “Beer Cầu Gẫy” + small line “cre:Quân”, CTA (Menu/Order/Account), remind separate shipping fee. • Menu /menu: call GET /api/public/menu, display parent categories → child groups → dishes (image, description, sale price). Add button → cart + toast “Added …”. • Cart & Checkout /checkout: • Save cart with localStorage. • Choose Dine-in (mandatory table number) or Delivery (mandatory name/phone/address). • POST /api/orders → success display id, total, profit + toast “Order success”; if Telegram sent ok, record notify:true. • Account /account: enter phone → GET /api/account/orders?phone= → order history (id, time, total) + points and tier.
Admin Features (basic RBAC) • Login /admin/login with ENV ADMIN_USER/ADMIN_PASS. Save JWT HTTP-only cookie. • Dashboard /admin (only after login): • Reports (Chart.js): GET /api/admin/reports?range=day|week|month|year → Revenue & Profit over time. • Categories: GET/POST /api/admin/categories → view & add parent/child categories (name, parent, pos). • Dishes: GET/POST /api/admin/items → view & add dish: name, image, description, category, sale price, cost price, is_active. • Note: Cost price only shown in admin, not exposed to public. • Coupon: GET/POST /api/admin/coupons → create % off code (with active / validity period). • Members: GET /api/admin/members → list by points/tier. • Protect admin API: all /api/admin/* routes require requireAdmin(); unauthenticated return 401.
Order Logic, Profit/Loss, Membership, Telegram • POST /api/orders: • Validate by order type (Dine-in/Delivery). • Fetch items by id, calculate subtotal, discount (% coupon if valid), total. • Profit: profit = (sale_price - cost_price) * qty (save to orders). • Save order_items with snapshot sale_price & cost_price. • If phone: add points (Math.round(total/1000)) & tier (>=1000 Silver, >=5000 Gold, >=10000 Platinum). • Send Telegram (use TELEGRAM_BOT_TOKEN + TELEGRAM_CHAT_ID or TELEGRAM_USER_ID): • Header (SHIP/AT TABLE); • List dishes; • Subtotal, Discount (if any), Total, Profit. • Return JSON: { id, subtotal, discount, total, profit, notify }. • GET /api/public/menu → return categories + items (public view). • GET /api/account/orders?phone= → return orders + member. • POST /api/admin/login → set cookie; GET /api/admin/me check session.
UI/UX Requirements • Tailwind: .card, .btn, .btn-primary, .input, .badge, shadow/card, light mesh background, responsive. • Smooth toast (add dish / error / order success). • No sound.
Definition of Done (acceptance)
1.  Build on Vercel successful; no prerender API or DB connect errors during build.
2.  First /menu if DB empty → auto seed demo.
3.  Add dish in /menu has toast; cart persists.
4.  /checkout order success; if Telegram config correct → Chat receives new order message.
5.  /account search by phone → has order history and points/tier.
6.  /admin/login (admin/admin) to /admin view Reports, add Categories, Dishes (sale/cost price), Coupon, view Members.
7.  Cost price not exposed public; sale price shown to customer; profit shown in order result & reports.
8.  Homepage has Beer Cầu Gẫy logo and “cre:Quân”; Checkout shows note “Note: pub will charge separate shipping fee depending on location”.
Point URL here. https://beer-teal.vercel.app . This is the URL I deploy the web.